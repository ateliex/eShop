// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eShop.Data;

#nullable disable

namespace eShop.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231006220419_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eShop.Modules.Customers.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CardType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Expiration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("eShop.Modules.ProductCatalog.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hering"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Colcci"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Lacoste"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Malwee"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Levi's"
                        },
                        new
                        {
                            Id = 8,
                            Name = "John John"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Rovitex"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Ralph Lauren"
                        });
                });

            modelBuilder.Entity("eShop.Modules.ProductCatalog.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Category A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Category B"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Category C"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Femininas"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Especiais"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Esporte"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Futebol"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Masculinas"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Regatas"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Camisas"
                        });
                });

            modelBuilder.Entity("eShop.Modules.ProductCatalog.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Colors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Features")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Sizes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slogan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Default"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CategoryId = 8,
                            Colors = "Azul-celeste,829fd6;Laranja,ef5740;Branco,d8d7de;Preto,1b1b1b;Royal,435498;Turquesa,435498;Verde,316551;Volt,b8f758;Cinza,b1b2b6;Dourado,f6ae35;Carmesim,f51c51;Roxa,4d177a;Vermelho,b62436",
                            Description = "A camiseta Youth Park VII é uma camisa de manga curta Dri-Fit com gola redonda de tecido próprio. Sem costura sob o braço para melhor movimento. Painéis laterais de malha para ventilação máxima.",
                            Features = "A tecnologia Dri-FIT ajuda a manter você seco e confortável;Painel traseiro de malha adiciona respirabilidade;Este produto é feito com fibras de poliéster 100% recicladas",
                            Name = "Camiseta masculina de futebol Park VII",
                            Sizes = "P;M;G;GG;XG"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            CategoryId = 8,
                            Colors = "Cinza,a1a8ac;Hyper Turq,86d3c9;Royal,0f429d;Vermelho,be2a3a;Val Blue,89a6d2;Volt,adec4c;Carmesim,f31458",
                            Description = "Os shorts de futebol masculinos Nike Dri-FIT Park III são projetados com tecido de poliéster respirável que proporcionam propriedades de secagem rápida, que se traduzem em conforto e foco total durante o treinamento. Estes shorts de corrida Nike oferecem tecnologia Dri-FIT que ajuda a manter você seco ao absorver a umidade da pele. Os shorts de treinamento proporcionam corte ajustado com a costura lateral perfilada que se encaixa perfeitamente no corpo, deixando a máxima amplitude de movimento. Os shorts de ginástica oferecem estabilização é fornecida por uma cintura elástica com um cordão. Shorts esportivos fornecem forro de malha que suporta a respirabilidade dos shorts. Estes shorts masculinos oferecem um logotipo sutil que caberá em qualquer roupa de treino. Material: 100% poliéster reciclado.",
                            Features = "A tecnologia Dri-FIT ajuda você a se manter seco, confortável e focado.;A cintura elástica é forrada com malha para respirabilidade e tem um cordão.",
                            Name = "Calções de Futebol Park III",
                            Sizes = "P;M;G;GG;XG"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            CategoryId = 8,
                            Colors = "Branco,d9dbde;Mescla Claro,c2c0bd;Preto,1f1c23",
                            Description = "Regata básica masculina, confeccionada em malha ribana de algodão. A malha proporciona um caimento perfeito, ideal para quem deseja aliar conforto e estilo. Possui modelagem slim, ajustada ao corpo e nas cavas, conta com alças largas e decote redondo. Perfeita para compor looks leves e frescos nos dias mais quentes. Aposte em combinações com shorts e bermudas Hering!",
                            Features = "100% Algodão;Peça básica;Modelagem Slim;Ajuste ao corpo e nas cavas;Feito no Brasil",
                            Name = "Regata em Ribana",
                            Sizes = "P;M;G;GG"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 1,
                            CategoryId = 4,
                            Colors = "Roxa,5f538f",
                            Description = "A camiseta Dri-FIT Park da Nike tem fibras que absorvem o suor para ajudar a manter você seco e confortável para o jogo. A malha na parte de trás adiciona ventilação. Este produto é feito com fibras de poliéster 100% recicladas.",
                            Features = "A tecnologia Dri-FIT ajuda a manter você seco e confortável.;Painel traseiro de malha adiciona respirabilidade.;Este produto é feito com fibras de poliéster 100% recicladas.",
                            Name = "Camiseta feminina US SS Park VII",
                            Sizes = "P;M;G;GG"
                        });
                });

            modelBuilder.Entity("eShop.Modules.ProductCatalog.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("ImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slogan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ModelId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Azul-celeste",
                            ImageUri = "https://localhost:44376/img/nike_camiseta_masculina_futebol_azul_celeste.jpg",
                            ModelId = 2,
                            Price = 237.82m,
                            Size = "P"
                        },
                        new
                        {
                            Id = 2,
                            Color = "Azul-celeste",
                            ImageUri = "https://localhost:44376/img/nike_camiseta_masculina_futebol_azul_celeste.jpg",
                            ModelId = 2,
                            Price = 246.23m,
                            Size = "M"
                        },
                        new
                        {
                            Id = 3,
                            Color = "Azul-celeste",
                            Discount = 53.08m,
                            ImageUri = "https://localhost:44376/img/nike_camiseta_masculina_futebol_azul_celeste.jpg",
                            ModelId = 2,
                            Price = 299.31m,
                            Size = "G"
                        },
                        new
                        {
                            Id = 4,
                            Color = "Laranja",
                            ImageUri = "https://localhost:44376/img/nike_camiseta_masculina_futebol_laranja.jpg",
                            ModelId = 2,
                            Price = 285.22m,
                            Size = "G"
                        },
                        new
                        {
                            Id = 5,
                            Color = "Laranja",
                            ImageUri = "https://localhost:44376/img/nike_camiseta_masculina_futebol_laranja.jpg",
                            ModelId = 2,
                            Price = 286.65m,
                            Size = "GG"
                        },
                        new
                        {
                            Id = 6,
                            Color = "Preto",
                            ImageUri = "https://localhost:44376/img/nike_camiseta_masculina_futebol_preto.jpg",
                            ModelId = 2,
                            Price = 255.79m,
                            Size = "M"
                        },
                        new
                        {
                            Id = 7,
                            Color = "Preto",
                            ImageUri = "https://localhost:44376/img/nike_camiseta_masculina_futebol_preto.jpg",
                            ModelId = 2,
                            Price = 257.89m,
                            Size = "G"
                        },
                        new
                        {
                            Id = 8,
                            Color = "Vermelho",
                            ImageUri = "https://localhost:44376/img/nike_calcoes_masculino_futebol_vermelho.jpg",
                            ModelId = 3,
                            Price = 222.82m,
                            Size = "P"
                        },
                        new
                        {
                            Id = 9,
                            Color = "Cinza",
                            ImageUri = "https://localhost:44376/img/nike_calcoes_masculino_futebol_cinza.jpg",
                            ModelId = 3,
                            Price = 264.58m,
                            Size = "M"
                        },
                        new
                        {
                            Id = 10,
                            Color = "Preto",
                            ImageUri = "https://localhost:44376/img/hering_regata_masculino_ribana_preto.jpg",
                            ModelId = 4,
                            Price = 59.99m,
                            Size = "G"
                        },
                        new
                        {
                            Id = 11,
                            Color = "Roxa",
                            ImageUri = "https://localhost:44376/img/nike_camiseta_feminina_roxa.jpg",
                            ModelId = 5,
                            Price = 298.01m,
                            Size = "P"
                        },
                        new
                        {
                            Id = 12,
                            Color = "Roxa",
                            ImageUri = "https://localhost:44376/img/nike_camiseta_feminina_roxa.jpg",
                            ModelId = 5,
                            Price = 298.01m,
                            Size = "M"
                        });
                });

            modelBuilder.Entity("eShop.Modules.ShoppingCart.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("eShop.Modules.ShoppingCart.CartItem", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("CartId", "ProductId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eShop.Modules.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eShop.Modules.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.Modules.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eShop.Modules.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShop.Modules.ProductCatalog.Model", b =>
                {
                    b.HasOne("eShop.Modules.ProductCatalog.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("eShop.Modules.ProductCatalog.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("eShop.Modules.ProductCatalog.Product", b =>
                {
                    b.HasOne("eShop.Modules.ProductCatalog.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("eShop.Modules.ProductCatalog.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("eShop.Modules.ProductCatalog.Model", "Model")
                        .WithMany("Products")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("eShop.Modules.ShoppingCart.CartItem", b =>
                {
                    b.HasOne("eShop.Modules.ShoppingCart.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("eShop.Modules.ProductCatalog.Model", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eShop.Modules.ShoppingCart.Cart", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
